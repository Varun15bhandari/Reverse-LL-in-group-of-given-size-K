/*Definition of singly linked list:
class ListNode {
    int val;
    ListNode next;

    ListNode() {
        val = 0;
        next = null;
    }

    ListNode(int data1) {
        val = data1;
        next = null;
    }

    ListNode(int data1, ListNode next1) {
        val = data1;
        next = next1;
    }
}
 */

class Solution {
    public ListNode reverseLinkedList(ListNode head) {
        /* Initialize 'temp' at 
         * head of linked list */
        ListNode temp = head;
        
        /* Initialize pointer 'prev' 
         * to NULL, representing 
         * the previous node */
        ListNode prev = null;
        
        // Continue till 'temp' 
        // reaches the end (NULL)
        while (temp != null) {
            /* Store the next node in 'front' 
             * to preserve the reference */
            ListNode front = temp.next;
            
            /* Reverse the direction of the 
             * current node's 'next' pointer 
             * to point to 'prev' */
            temp.next = prev;
            
            /* Move 'prev' to the current 
             * node for the next iteration */
            prev = temp;
            
            /* Move 'temp' to the 'front' node 
             * advancing the traversal */
            temp = front;
        }
        
        // Return the new head 
        // of the reversed linked list
        return prev;
    }

    // Function to get the Kth node from a 
    // given position in the linked list
    public ListNode getKthNode(ListNode temp, int k) {
        // Decrement K 
        // as we already start 
        // from the 1st node
        k -= 1;

        // Decrement K until it reaches the desired position
        while (temp != null && k > 0) {
            // Decrement k as temp progresses
            k--;
            
            // Move to the next node
            temp = temp.next;
        }
        
        // Return the Kth node
        return temp;
    }
    
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp=head;
        ListNode prev=null;
        while(temp!=null){
            ListNode kThNode=getKthNode(temp,k);
            if(kThNode==null){
                if(prev!=null){
                   prev.next=temp;
                }
                break;
            }
            ListNode nextNode=kThNode.next;
            kThNode.next=null;
            reverseLinkedList(temp);
            if(temp==head){
                head=kThNode;
            }else{
                prev.next=kThNode;
            }
            prev=temp;
            temp=nextNode;
  
        }
        return head;
    }
}
